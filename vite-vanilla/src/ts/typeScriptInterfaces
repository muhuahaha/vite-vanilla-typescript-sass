// ------------------------- Type Signature
import Invoice from "./classes/Invoice.js";
import Payment from "./classes/Payment.js";
import { HasFormatter } from "./interfaces/HasFormatter.js";
import { gsap } from "gsap";
import { ListTemplate } from "./classes/ListTemplate.js";

const anchor = document.querySelector("a")!;

// console.log(anchor);
// console.log(anchor.href);

// const form = document.querySelector("form")!;[]
// console.log(form, "#form");

// interfaces

interface IsPerson {
  name: string;
  age: number;
  speak(a: string): void;
  spend(a: number): number;
}

const me: IsPerson = {
  name: "shrek",
  age: 30,
  speak(text: string): void {
    console.log(text);
  },
  spend(amount: number): number {
    console.log("I spent", amount);
    return amount;
  },
};

const greetPerson = (person: IsPerson) => {
  console.log("hello", person.name);
};

console.log(greetPerson(me));

console.log(me);
console.log(me.speak("YOO"));
console.log(me.speak("Yoooo"));

let docOne: HasFormatter;
let docTwo: HasFormatter;

docOne = new Invoice("yoshi", "web work", 250);
docTwo = new Payment("mario", "plumbubg work", 200);

console.log(docOne);
console.log(docTwo);

let docs: HasFormatter[] = [];
docs.push(docOne);
docs.push(docTwo);

console.log(docs);

const invOne = new Invoice("yo", "dawork on the website", 23323);
const invTwo: any = new Invoice("Luigi", "dawork on the website", 4453);
const invThree = new Invoice("Oh", "dawork on the website", 4453);

// console.log(invOne, "invOnes");
// console.log(invTwo, "invTwo");
let invoices: Invoice[] = [];
invoices.push(invOne);
invoices.push(invTwo);
invoices.push(invThree);
invoices.forEach((inv) => {
  console.log(inv.client, inv.amount, inv.format());
});

const form = document.querySelector(".new-item-form") as HTMLFormElement;
// console.log(form?.children, "#form");

const test2 = form?.children as HTMLCollectionOf<HTMLElement>;
for (let item of test2) {
  // console.log(item.textContent, "hallloooo");
  item.style.color = "darkblue";
}

// inputs
const type = document.querySelector("#type") as HTMLSelectElement;
const tofrom = document.querySelector("#tofrom") as HTMLInputElement;
const details = document.querySelector("#details") as HTMLInputElement;
const amount = document.querySelector("#amount") as HTMLInputElement;

// const show = document.querySelector("#show") as HTMLElement;

// list template instance
const ul = document.querySelector("ul")!;
const list = new ListTemplate(ul);

form.addEventListener("submit", (e: Event) => {
  e.preventDefault();

  let values: [string, string, number];
  values = [tofrom.value, details.value, amount.valueAsNumber];

  let doc: HasFormatter;
  if (type.value === "invoice") {
    doc = new Invoice(...values);
  } else {
    doc = new Payment(...values);
  }

  list.render(doc, type.value, "end");
});

form.addEventListener("submit", (e: Event) => {
  e.preventDefault();
  console.log(type.value, tofrom.value, details.value, amount.valueAsNumber);
});

// console.log(type);
// console.log(tofrom);
// console.log(details);
// console.log(amount);

export const result = anchor;
export const result1 = form;
export const result2 = invoices[0];

gsap.fromTo(".color", { autoAlpha: 0 }, { autoAlpha: 1, duration: 0.6 });
